const axios = require('axios');

async function testProductsAPI() {
  console.log('üß™ Test de l\'API des produits...\n');

  try {
    // Test de l'API des produits
    console.log('üì¶ R√©cup√©ration des produits...');
    const response = await axios.get('http://localhost:9000/api/products');
    
    console.log('‚úÖ API des produits fonctionne !');
    console.log(`üìä Nombre de produits: ${response.data.products?.length || response.data.length || 0}`);
    
    const products = response.data.products || response.data;
    
    if (products.length > 0) {
      console.log('\nüìã Premiers produits:');
      products.slice(0, 3).forEach((product, index) => {
        console.log(`${index + 1}. ${product.name} - ${product.price} TND (ID: ${product._id})`);
      });
    } else {
      console.log('‚ö†Ô∏è  Aucun produit trouv√© dans la base de donn√©es');
      console.log('üí° Cr√©ez des produits dans l\'admin pour tester la cr√©ation de commandes');
    }

    console.log('\nüîó Structure de r√©ponse:');
    console.log('- Type:', typeof response.data);
    console.log('- Cl√©s:', Object.keys(response.data));
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test de l\'API des produits:');
    console.error('- Message:', error.message);
    
    if (error.response) {
      console.error('- Status:', error.response.status);
      console.error('- Data:', error.response.data);
    } else if (error.request) {
      console.error('- Pas de r√©ponse du serveur');
      console.error('- V√©rifiez que le serveur backend est d√©marr√© sur le port 9000');
    }
    
    console.log('\nüîß Solutions possibles:');
    console.log('1. D√©marrer le serveur backend: cd backend && npm run dev');
    console.log('2. V√©rifier que MongoDB est en cours d\'ex√©cution');
    console.log('3. Cr√©er des produits dans l\'admin: http://localhost:5173/admin/products');
  }
}

testProductsAPI();
